{
  "_from": "google-spreadsheet",
  "_id": "google-spreadsheet@3.0.11",
  "_inBundle": false,
  "_integrity": "sha512-bkYUdsq4Nwg7klnFevG6MRHXAfGh9gYVymGp001YdtThct5uSIB/41lUOsGzFbQQSR5FcBTwAu9nZVYvaNdv9Q==",
  "_location": "/google-spreadsheet",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "google-spreadsheet",
    "fetchSpec": "latest",
    "name": "google-spreadsheet",
    "raw": "google-spreadsheet",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/google-spreadsheet/-/google-spreadsheet-3.0.11.tgz",
  "_shasum": "6114fda30bafe371fa454337ef2e7d01d1abf564",
  "_spec": "google-spreadsheet",
  "_where": "/home/aaronsms78/Projects/hunt/server",
  "author": {
    "email": "theozero@gmail.com",
    "name": "Theo Ephraim",
    "url": "https://theoephraim.com"
  },
  "bugs": {
    "url": "https://github.com/theoephraim/node-google-spreadsheet/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "axios": "^0.19.1",
    "google-auth-library": "^5.9.1",
    "lodash": "^4.17.15"
  },
  "deprecated": false,
  "description": "Google Sheets API (v4) -- simple interface to read/write data and manage sheets",
  "devDependencies": {
    "delay": "^4.3.0",
    "docsify-cli": "^4.4.0",
    "eslint": "^6.8.0",
    "eslint-config-airbnb-base": "^14.0.0",
    "eslint-plugin-async-await": "0.0.0",
    "eslint-plugin-import": "^2.20.0",
    "eslint-plugin-jest": "^23.6.0",
    "husky": "^4.2.0",
    "jest": "^24.9.0",
    "jest-junit": "^10.0.0"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "homepage": "https://github.com/theoephraim/node-google-spreadsheet",
  "husky": {
    "hooks": {
      "pre-commit": "npm run lint",
      "pre-push": "npm run test"
    }
  },
  "jest": {
    "coveragePathIgnorePatterns": [
      "/examples/",
      "/node_modules/",
      "/test/"
    ],
    "testEnvironment": "node",
    "testTimeout": 10000
  },
  "keywords": [
    "api",
    "gdata",
    "google",
    "google docs",
    "google sheets",
    "google spreadsheets",
    "googleapis",
    "sheets",
    "spreadsheet",
    "spreadsheets"
  ],
  "license": "Unlicense",
  "main": "index.js",
  "name": "google-spreadsheet",
  "optionalDependencies": {},
  "readme": "# google-spreadsheet\r\n> The most popular [Google Sheets API](https://developers.google.com/sheets/api/reference/rest) wrapper for javascript\r\n\r\n[![NPM version](https://img.shields.io/npm/v/google-spreadsheet)](https://www.npmjs.com/package/google-spreadsheet)\r\n[![CircleCI](https://circleci.com/gh/theoephraim/node-google-spreadsheet.svg?style=shield)](https://circleci.com/gh/theoephraim/node-google-spreadsheet)\r\n[![Known Vulnerabilities](https://snyk.io/test/github/theoephraim/node-google-spreadsheet/badge.svg?targetFile=package.json)](https://snyk.io/test/github/theoephraim/node-google-spreadsheet?targetFile=package.json)\r\n[![NPM](https://img.shields.io/npm/dw/google-spreadsheet)](https://www.npmtrends.com/google-spreadsheet)\r\n\r\n- multiple auth options - API key, service account, oauth\r\n- cell-based API - read, write, bulk-updates, formatting\r\n- row-based API - read, update, delete (based on the old v3 row-based calls)\r\n- managing worksheets - add, remove, resize, change title, formatting\r\n\r\n## Documentation Site\r\nFull docs are available at [https://theoephraim.github.io/node-google-spreadsheet](https://theoephraim.github.io/node-google-spreadsheet)\r\n\r\n> **ðŸš¨ Google Deprecation Warning - affects older version (v2) of this module ðŸš¨**\r\n>\r\n> Google is [phasing out their old v3 api](https://cloud.google.com/blog/products/g-suite/migrate-your-apps-use-latest-sheets-api), which the older version of this module used to use. Originally they were going to shut it down on March 3rd 2020, but have pushed that date back to September 30th.\r\n\r\n\r\n**Regardless, please upgrade to the latest version of this module (v3) which uses the newer sheets v4 API**\r\n\r\n-------------\r\n\r\n> ðŸŒˆ **Installation** - `npm i google-spreadsheet --save`\r\n\r\n## Examples\r\n_the following examples are meant to give you an idea of just some of the things you can do_\r\n\r\n### The Basics\r\n```javascript\r\nconst { GoogleSpreadsheet } = require('google-spreadsheet');\r\n\r\n// spreadsheet key is the long id in the sheets URL\r\nconst doc = new GoogleSpreadsheet('<the sheet ID from the url>');\r\n\r\n// use service account creds\r\nawait doc.useServiceAccountAuth({\r\n  client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,\r\n  private_key: process.env.GOOGLE_PRIVATE_KEY,\r\n});\r\n// OR load directly from json file if not in secure environment\r\nawait doc.useServiceAccountAuth(require('./creds-from-google.json'));\r\n// OR use API key -- only for read-only access to public sheets\r\ndoc.useApiKey('YOUR-API-KEY');\r\n\r\nawait doc.loadInfo(); // loads document properties and worksheets\r\nconsole.log(doc.title);\r\nawait doc.updateProperties({ title: 'renamed doc' });\r\n\r\nconst sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id]\r\nconsole.log(sheet.title);\r\nconsole.log(sheet.rowCount);\r\n\r\n// adding / removing sheets\r\nconst newSheet = await doc.addSheet({ title: 'hot new sheet!' });\r\nawait newSheet.delete();\r\n```\r\nMore info:\r\n- [GoogleSpreadsheet](https://theoephraim.github.io/node-google-spreadsheet/#/classes/google-spreadsheet)\r\n- [GoogleSpreadsheetWorksheet](https://theoephraim.github.io/node-google-spreadsheet/#/classes/google-spreadsheet-worksheet)\r\n- [Authentication](https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication)\r\n\r\n\r\n\r\n### Working with rows\r\n```javascript\r\n// create a sheet and set the header row\r\nconst sheet = await doc.addSheet({ headerValues: ['name', 'email'] });\r\n\r\n// append rows\r\nconst larryRow = await sheet.addRow({ name: 'Larry Page', email: 'larry@google.com' });\r\nconst moreRows = await sheet.addRows([\r\n  { name: 'Sergey Brin', email: 'sergey@google.com' },\r\n  { name: 'Eric Schmidt', email: 'eric@google.com' },\r\n]);\r\n\r\n// read rows\r\nconst rows = await sheet.getRows(); // can pass in { limit, offset }\r\n\r\n// read/write row values\r\nconsole.log(rows[0].name); // 'Larry Page'\r\nrows[1].email = 'sergey@abc.xyz'; // update a value\r\nawait rows[1].save(); // save updates\r\nawait rows[1].delete(); // delete a row\r\n```\r\nMore info:\r\n- [GoogleSpreadsheetWorksheet > Working With Rows](https://theoephraim.github.io/node-google-spreadsheet/#/classes/google-spreadsheet-worksheet#working-with-rows)\r\n- [GoogleSpreadsheetRow](https://theoephraim.github.io/node-google-spreadsheet/#/classes/google-spreadsheet-row)\r\n\r\n\r\n\r\n### Working with cells\r\n```javascript\r\nawait sheet.loadCells('A1:E10'); // loads a range of cells\r\nconsole.log(sheet.cellStats); // total cells, loaded, how many non-empty\r\nconst a1 = sheet.getCell(0, 0); // access cells using a zero-based index\r\nconst c6 = sheet.getCellByA1('C6'); // or A1 style notation\r\n// access everything about the cell\r\nconsole.log(a1.value);\r\nconsole.log(a1.formula);\r\nconsole.log(a1.formattedValue);\r\n// update the cell contents and formatting\r\na1.value = 123.456;\r\nc6.formula = '=A1';\r\na1.textFormat = { bold: true };\r\nc6.note = 'This is a note!';\r\nawait sheet.saveUpdatedCells(); // save all updates in one call\r\n```\r\nMore info:\r\n- [GoogleSpreadsheetWorksheet > Working With Cells](https://theoephraim.github.io/node-google-spreadsheet/#/classes/google-spreadsheet-worksheet#working-with-cells)\r\n- [GoogleSpreadsheetCell](https://theoephraim.github.io/node-google-spreadsheet/#/classes/google-spreadsheet-row)\r\n\r\n\r\n\r\n## Why?\r\n> **This module provides an intuitive wrapper around Google's API to simplify common interactions**\r\n\r\nWhile Google's v4 sheets api is much easier to use than v3 was, the official [googleapis npm module](https://www.npmjs.com/package/googleapis) is a giant meta-tool that handles _every Google product_. The module and the API itself are awkward and the docs are pretty terrible, at least to get started.\r\n\r\n**In what situation should you use Google's API directly?**<br>\r\nThis module makes trade-offs for simplicity of the interface.\r\nGoogle's API provides a mechanism to make many requests in parallel, so if speed and efficiency is extremely important to your use case, you may want to use their API directly. There are also several features of their API that are not implemented here yet.\r\n\r\n\r\n## Support & Contributions\r\n\r\nThis module was written and is actively maintained by [Theo Ephraim](https://theoephraim.com).\r\n\r\n**Are you actively using this module for a commercial project? Want to help support it?**<br>\r\n[Buy Theo a beer](https://paypal.me/theoephraim)\r\n\r\n#### Sponsors\r\n\r\nNone yet - get in touch!\r\n\r\n#### Contributing\r\n\r\nContributions are welcome, but please follow the existing conventions, use the linter, add relevant tests, add relevant documentation.\r\n\r\nThese docs are generated using [docsify](https://docsify.js.org). To preview and run locally so you can make edits, run `npm run docs:preview` and head to http://localhost:3000\r\nThe content lives in markdown files in the docs folder.\r\n\r\n## License\r\nThis is free and unencumbered public domain software. For more info, see https://unlicense.org.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/theoephraim/node-google-spreadsheet.git"
  },
  "scripts": {
    "docs:preview": "docsify serve docs",
    "lint": "eslint ./",
    "lint:fix": "eslint ./ --fix",
    "test": "jest --runInBand"
  },
  "version": "3.0.11"
}
